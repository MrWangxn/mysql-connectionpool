set(VTH_CMAKE_DIR ${CMAKE_CURRENT_LIST_DIR} CACHE INTERNAL "vth cmake script directory")
set(CMAKE_MODULE_PATH ${VTH_CMAKE_DIR}/modules)

set(STDAFX_PCH_H ${CMAKE_SOURCE_DIR}/stdafx.h)
set(STDAFX_PCH_C ${CMAKE_SOURCE_DIR}/stdafx.cpp)

include("${VTH_CMAKE_DIR}/vth_find.cmake")

if(WIN32)
	include("${VTH_CMAKE_DIR}/msvcpch.cmake")
endif()

macro(list_element list_ref list_index element_ref)
	list(GET ${list_ref} ${list_index} ${element_ref})
	list(REMOVE_AT ${list_ref} ${list_index})
endmacro()

macro(impl_files_filter args_ref)
	set(_argn ${ARGN})
	set(_a)
	while(NOT "!${_argn}" STREQUAL "!")
		list_element(_argn 0 _a)
		if(_a MATCHES "(^WIN$|^UNIX$|^LINUX$|^MAC$|^OSX$|^IOS$|^BSD$)")
			list(GET _argn 0 _b)
			if("!${_b}" STREQUAL "!(")
				list(REMOVE_AT _argn 0)
				if(OS_${_a})
					impl_files_filter(${args_ref} ${_argn})
				else()
					_del_args()
				endif()
			else()
				list(APPEND ${args_ref} "${_a}")
			endif()
		elseif("!${_a}" STREQUAL "!)")
			break()
		else()
			list(APPEND ${args_ref} "${_a}")
		endif()
	endwhile()
endmacro()

macro(_args_files_filter args_ref)
	set(${args_ref})
	impl_files_filter(${args_ref} ${ARGN})
endmacro()


macro(vth_add_sources)
	_args_files_filter(_cur_system_argn ${ARGN})
	foreach(_f ${_cur_system_argn})
		if(_f MATCHES "(PCH|QT4_AUTOMOC)")
		else()
			string(TOLOWER "${_f}" _f)
			if(_f MATCHES "(\\.c|\\.cc|\\.cpp|\\.cxx)")
			elseif(_f MATCHES "(\\.h|\\.hh|\\.hpp|\\.hxx)")
			elseif(_f MATCHES "(\\.m|\\.mm)")
			elseif(_f MATCHES "(\\.inl)")
			elseif(_f MATCHES "(\\.l|\\.y)")
			elseif(_f MATCHES "(\\.rc|\\.idl|\\.rc)")
			elseif(_f MATCHES "(\\.ui|\\.qrc|\\.ts)")
			elseif(_f MATCHES "(\\.plist)")
			elseif(_f MATCHES "(\\.js)")
			elseif(_f MATCHES "(\\.def)")
				set(VTH_CURRENT_PACKAGE_LINK_DEF_FILE ${_f})
			else()
				message(FATAL_ERROR "Unrecognized source file ${_f}")
			endif()
		endif()
	endforeach()
	list(APPEND VTH_CURRENT_PACKAGE_SRCS ${_cur_system_argn} "VTH_SOURCE_SEPARATOR")
endmacro()

macro(vth_include_directories)
	_args_files_filter(_cur_system_argn ${ARGN})
	include_directories(${_cur_system_argn})
endmacro()

macro(vth_include_packages)
	_args_files_filter(_cur_system_argn ${ARGN})
	foreach(_pkg ${_cur_system_argn})
		if(NOT TARGET ${_pkg})
			message(FATAL_ERROR "${_pkg} is not a valid package.")
		endif()
		get_property(_pkg_type TARGET ${_pkg} PROPERTY VTH_PACKAGE_TYPE)
		if(NOT ${_pkg_type} STREQUAL "NONE")
			get_property(_pub_dir TARGET ${_pkg} PROPERTY VTH_PUBLIC_HEADER_DIR)
			include_directories(${_pub_dir})
			list(APPEND VTH_CURRENT_PACKAGE_DEPEND_PKGS ${_pkg})
			list(APPEND VTH_CURRENT_PACKAGE_INCLUDE_PKG_DIRS ${_pub_dir})
		endif()
	endforeach()
endmacro()

macro(vth_add_subdirectory dir)
add_subdirectory(${dir})
endmacro()
